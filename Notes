    POM: Page Object Model: Kabul gormus bir framework dizayn pattern'dir.

    Temel amaci:
    - Maintenance'i kolaylastirmak,
    - Tekrar eden kodlari tekrar tekrar yazmaktan kurtulmak,
    - Faydali ve kullanilabilir methodlar olusturup bunu framewoek'un tamaminda kullanabilmek,
    - Test datalarini tek merkezden kontrol edebilmek,
    - Sonradan projeye katilanlarin framework'un kolayca anlayabilmesini saglamak
    - Dinamik test method'lari yazabilmek.

    Temel Class'lar:
    1- pages: lacate'ler ve faydali reusable method'lar
    2- Driver:
        - Static methodlarla ulasilacak sekilde organiza ettik,
        - Tek bir browser'a bagimli olmaktan kurtulduk
        - getDriver() ve closeDriver() methodlari sayesinde istedigimiz yerde driver acmak veya kapatmak elimizde
        - Driver class'ini farkli objeler olusturmamak icin Singleton pattern'e uygun olarak duzenledik.
    3- configuration.properties:
        - test datalarimizi tutmak icin kullandigimiz dosyadir.
        - key=value seklinde ikililerden olusur.
        - key'ler unique olmak zorundadir.
        - ConfigReader: configuration.properties dosyasindaki test datalarini alabilmek icin olusturdugumuz class'dir
                        Java'daki Properties class'i sayesinde bizim gonderdigimiz key'e ait value'yu
                        configuration.properties'dan bize getirir.

========================================================================================================
    /*
    - XML: HTML gibi data transfer formatidir.
    - TestNG ile XML dosya kullanmamizin seebi: toplu dosya calistirmak istedigimizde, hangi dosyalarin
    calismasini veya calismamasini istedimizde TestNG'ye XML dostalar ile iletebiliriz.
    - XML dosyalar sayesinde istedigimiz level'daki testlerimizi toplu olarak calistirabiliriz, bunun icin
    suite'den baslayarak testlerimizi sectigimiz level'a kadar sirasiyla(hiyerarsik olarak) taglari olusturmaliyiz.

    - Eger birden fazla hiyerarsiye ihtiyacimiz varsa, ayrilma level'ini iyi tesbit edip. o noktadan itibaren
    birden fazla hiyerarsi olusturabiliriz.

    - Eger bir test olustururken farkli package ve class'lardan test methodlari calistiracaksak, hiyerarsik olarak
    herbir method'a ulasmak zahmetli olacaktir. Bu durumda groups devreye girer. Istedigimiz test methoduna istedigimiz
    kadar groups atayabiliriz. Ve bu groups'lari istedigimiz zaman calistirabiliriz.
        Groups secimi yapilirken dikkat edilmesi gerekenler
        1. Calisacak ve calismayacak groups'lari belirlerken
        2. Bu groups'larin nerede aranacagini belirler

    - Groups olarak XML'den calistirdigimizda include ve exclude sayesinde groups'lari istedigimiz sekilde
    organize edebiliriz.

     */